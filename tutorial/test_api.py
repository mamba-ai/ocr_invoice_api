import requests

API_URL = "https://n8f348z9p2awlhfw.us-east-1.aws.endpoints.huggingface.cloud/predict"
token = "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"
headers = {
	"Accept" : "application/json",
	"Authorization": f"Bearer {token}",
	"Content-Type": "application/json" 
}

def query(payload):
	response = requests.post(API_URL, headers=headers, json=payload)
	return response.json()

output = query({
  "type": "invoice",
  "image_base64": "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"
})

print(output)


'''
Input format:
{
    "type": "invoice", # later can support more types like "receipt", "structured_document"
    "image_base64": ... # base64 encoded image
}
'''